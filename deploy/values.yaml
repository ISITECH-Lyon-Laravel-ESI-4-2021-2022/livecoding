# Default values for laravel.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

env:
  appName: "Laravel"
  appKey: ""
  appUrl: "https://laravel.dev"
  production: true
  redirectHttps: true
  cacheDriver: "redis"
  queueConnection: "database"
  sessionDriver: "database"
  redisClient: "predis"
  redisCluster: "false"
  logChannel: "stack"
  mail:
    mailer: "smtp"
    host: "smtp.mailtrap.io"
    port: "2525"
    username: ""
    password: ""
    encryption: ""
    fromAddress: ""
    fromName: ""
  filesystemDriver: "minio"
  filesystemCloud: "minio"
  aws:
    defaultRegion: "us-east-1"
    bucket: "local"
    url: ""

replicaCount: 1

image:
  repository: nginx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets:
  - name: registry-scaleway-key #cbccde9d-3a02-4d20-9c92-f6de3b973390
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations:
  timestamp: "0"

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    cert-manager.io/cluster-issuer: letsencrypt-prod-http01
  hosts:
    - host: app.local
      paths:
        - "/"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
#    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


mysql:
  ## Whether to deploy a mariadb server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  ##
  enabled: true

  ## Use existing secret (ignores root, db and replication passwords)
  ##
  # existingSecret:

  ## Admin (root) credentials
  ##
  root:
    ## MySQL admin password
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-the-root-password-on-first-run
    ##
    password:
    ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
    ## If it is not force, a random password will be generated.
    ##
    forcePassword: true
    ## Mount admin password as a file instead of using an environment variable
    ##
    injectSecretsAsVolume: false

  ## Custom user/db credentials
  ##
  db:
    ## MySQL username and password
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#creating-a-database-user-on-first-run
    ## Note that this user should be different from the MySQL replication user (replication.user)
    ##
    user: default
    password:
    ## Database to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#creating-a-database-on-first-run
    ##
    name: default
    ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
    ## If it is not force, a random password will be generated.
    ##
    forcePassword: true
    ## Mount replication user password as a file instead of using an environment variable
    ##
    injectSecretsAsVolume: false

  ## Replication configuration
  ##
  replication:
    ## Enable replication. This enables the creation of replicas of MySQL. If false, only a
    ## master deployment would be created
    ##
    enabled: false
    ##
    ## MySQL replication user
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-up-a-replication-cluster
    ## Note that this user should be different from the MySQL user (db.user)
    ##
    user: replicator
    ## MySQL replication user password
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-up-a-replication-cluster
    ##
    password:
    ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
    ## If it is not force, a random password will be generated.
    ##
    forcePassword: false
    ## Mount replication user password as a file instead of using an environment variable
    ##
    injectSecretsAsVolume: false

  ## Master nodes parameters
  ##
  master:
    ## Enable persistence using PVCs on master nodes
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## If true, use a Persistent Volume Claim, If false, use emptyDir
      ##
      enabled: true
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      ## PVC annotations
      ##
      annotations: {}
      ## Persistent Volume Access Mode
      ##
      accessModes:
        - ReadWriteOnce
      ## Persistent Volume size
      ##
      size: 3Gi
      ## Use an existing PVC
      ##
      # existingClaim:

    resources:
      requests:
        memory: 128Mi
  ## Slave nodes parameters
  ##
  slave:
    ## Number of slave replicas
    ##
    replicas: 1

    ## Enable persistence using PVCs on slave nodes
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## If true, use a Persistent Volume Claim, If false, use emptyDir
      ##
      enabled: true
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      ## PVC annotations
      ##
      annotations: {}
      ## Persistent Volume Access Mode
      ##
      accessModes:
        - ReadWriteOnce
      ## Persistent Volume size
      ##
      size: 8Gi
      ## Use an existing PVC
      ##
      # existingClaim:

##
## External Database Configuration
##
## All of these values are only used when mariadb.enabled is set to false
##
externalDatabase:
  ## Database host
  ##
  host: localhost

  ## non-root Username for Wordpress Database
  ##
  user: default

  ## Use existing secret (ignores password)
  ##
  secret:

  ## Database password
  ##
  password: ""

  ## Database name
  ##
  database: default

  ## Database port number
  ##
  port: 3306


## Redis chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  ## Whether to deploy a redis server to satisfy the applications requirements. To use an external redis instance set this to false and configure the externalRedis parameters
  ##
  enabled: true
  ## Use password authentication
  ##
  usePassword: true
  ## Redis password (both master and slave)
  ## Defaults to a random 10-character alphanumeric string if not set and usePassword is true.
  ## It should always be set using the password value or in the existingSecret to avoid issues
  ## with Discourse.
  ## The password value is ignored if existingSecret is set
  # password:
  ##
  ## Name of existing secret object containing the password
  existingSecret:
  ##
  ## Password key to be retrieved from Redis secret
  existingSecretPasswordKey: 'redis-password'
  ##
  ## Cluster settings
  ##
  cluster:
    enabled: false

  ##
  ## Redis Master parameters
  ##
  master:
    persistence:
      enabled: false
    resources:
      requests:
        memory: 10Mi

##
## External Redis
##
externalRedis:
  ## Redis host
  ##
  host: ''
  ## Redis port
  ##
  port: 6379
  ## Redis password for authentication
  ## Ignored if existingSecret is set
  ##
  password: ''
  ##
  ## Name of existing secret object containing the password
  existingSecret:
  ##
  ## Password key to be retrieved from Redis secret
  existingSecretPasswordKey: 'redis-password'

minio:
  enabled: true
  accessKey:
    password: 'access'
    forcePassword: true
  secretKey:
    password: 'secretkey'
    forcePassword: true
  defaultBuckets: 'local'
  disableWebUI: false
  existingSecret:
  persistence:
    enabled: false
    size: 3Gi
  resources:
    requests:
      memory: 75Mi
##
## External Redis
##
externalMinio:
  host: ''
  port: 9000
  protocol: 'http'
  accessKey: ''
  secretKey: ''
